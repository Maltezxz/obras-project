// Script para testar as corre√ß√µes do AuthContext
// Execute este c√≥digo no console do navegador (F12) na p√°gina do seu projeto

console.log('üß™ TESTANDO CORRE√á√ïES DO AUTHCONTEXT');
console.log('====================================');

async function testAuthFixes() {
  try {
    // 1. Verificar se as vari√°veis de ambiente est√£o carregadas
    console.log('\n1Ô∏è‚É£ Verificando configura√ß√£o...');
    const url = import.meta.env.VITE_SUPABASE_URL;
    const key = import.meta.env.VITE_SUPABASE_ANON_KEY;
    
    if (!url || !key) {
      console.error('‚ùå PROBLEMA: Arquivo .env n√£o configurado!');
      console.log('üí° SOLU√á√ÉO: Crie arquivo .env na pasta project/');
      return;
    }
    
    console.log('‚úÖ Vari√°veis de ambiente OK');
    
    // 2. Criar cliente Supabase
    const { createClient } = window.supabase;
    const supabase = createClient(url, key);
    console.log('‚úÖ Cliente Supabase criado');
    
    // 3. Verificar usu√°rio na tabela
    console.log('\n2Ô∏è‚É£ Verificando usu√°rio na tabela...');
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('cnpj', '89.263.465/0001-49')
      .eq('name', 'danilo')
      .maybeSingle();
    
    if (userError) {
      console.error('‚ùå Erro na tabela users:', userError);
      return;
    }
    
    if (!userData) {
      console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado na tabela. Criando...');
      
      const { data: newUser, error: createError } = await supabase
        .from('users')
        .insert({
          name: 'danilo',
          email: 'danilo@teste.com',
          cnpj: '89.263.465/0001-49',
          role: 'host'
        })
        .select()
        .single();
      
      if (createError) {
        console.error('‚ùå Erro ao criar usu√°rio:', createError);
        return;
      }
      
      console.log('‚úÖ Usu√°rio criado na tabela:', newUser);
    } else {
      console.log('‚úÖ Usu√°rio encontrado na tabela:', userData);
    }
    
    // 4. Testar login
    console.log('\n3Ô∏è‚É£ Testando login...');
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'danilo@teste.com',
      password: '123'
    });
    
    if (authError) {
      console.error('‚ùå ERRO NO LOGIN:', authError);
      
      if (authError.message.includes('Invalid login credentials')) {
        console.log('\nüí° SOLU√á√ÉO: Criar usu√°rio no Supabase Auth');
        console.log('üìã PASSO A PASSO:');
        console.log('1. Acesse o Dashboard do Supabase');
        console.log('2. V√° para Authentication > Users');
        console.log('3. Clique em "Add user"');
        console.log('4. Preencha:');
        console.log('   - Email: danilo@teste.com');
        console.log('   - Password: 123');
        console.log('   - Auto Confirm User: ‚úÖ');
        console.log('5. Clique em "Create user"');
        
        // Tentar criar via signUp
        console.log('\nüîÑ Tentando criar via signUp...');
        const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
          email: 'danilo@teste.com',
          password: '123',
          options: {
            data: { name: 'danilo' }
          }
        });
        
        if (signUpError) {
          console.error('‚ùå Erro no signUp:', signUpError);
        } else {
          console.log('‚úÖ Usu√°rio criado via signUp:', signUpData);
          console.log('üìß Verifique seu email para confirmar');
        }
      }
    } else {
      console.log('üéâ SUCESSO! Login funcionando!');
      console.log('üë§ Usu√°rio autenticado:', authData.user);
      
      // 5. Testar loadUser com o ID correto
      console.log('\n4Ô∏è‚É£ Testando loadUser...');
      const { data: loadedUser, error: loadError } = await supabase
        .from('users')
        .select('*')
        .eq('id', authData.user.id)
        .maybeSingle();
      
      if (loadError) {
        console.error('‚ùå Erro ao carregar usu√°rio:', loadError);
      } else if (!loadedUser) {
        console.warn('‚ö†Ô∏è Usu√°rio n√£o encontrado com ID do Auth');
        console.log('üí° Isso pode indicar que os IDs n√£o est√£o sincronizados');
        
        // Tentar buscar por email
        const { data: userByEmail, error: emailError } = await supabase
          .from('users')
          .select('*')
          .eq('email', authData.user.email)
          .maybeSingle();
        
        if (emailError) {
          console.error('‚ùå Erro ao buscar por email:', emailError);
        } else if (userByEmail) {
          console.log('‚úÖ Usu√°rio encontrado por email:', userByEmail);
          console.log('üí° IDs precisam ser sincronizados');
        }
      } else {
        console.log('‚úÖ Usu√°rio carregado com sucesso:', loadedUser);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Fun√ß√£o para testar apenas o login
async function testLoginOnly() {
  console.log('üß™ TESTE R√ÅPIDO DE LOGIN');
  console.log('========================');
  
  const { createClient } = window.supabase;
  const supabase = createClient(
    import.meta.env.VITE_SUPABASE_URL,
    import.meta.env.VITE_SUPABASE_ANON_KEY
  );
  
  const { data, error } = await supabase.auth.signInWithPassword({
    email: 'danilo@teste.com',
    password: '123'
  });
  
  if (error) {
    console.error('‚ùå Erro no login:', error);
  } else {
    console.log('‚úÖ Login bem-sucedido!', data.user);
  }
}

// Executar automaticamente
console.log('üöÄ Executando teste das corre√ß√µes...');
testAuthFixes();

// Disponibilizar fun√ß√µes no console
window.testAuthFixes = testAuthFixes;
window.testLoginOnly = testLoginOnly;

console.log('\nüìù FUN√á√ïES DISPON√çVEIS:');
console.log('- testAuthFixes() - Teste completo das corre√ß√µes');
console.log('- testLoginOnly() - Teste r√°pido de login');
