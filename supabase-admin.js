// Script para administrar o Supabase usando credenciais diretas
// Execute este script no console do navegador ou como script Node.js

import { createClient } from '@supabase/supabase-js';

// CONFIGURA√á√ÉO: Substitua pelas suas credenciais do Supabase
const SUPABASE_CONFIG = {
  url: 'https://seu-projeto.supabase.co', // Substitua pela sua URL
  anonKey: 'sua-chave-anonima', // Substitua pela sua chave an√¥nima
  serviceKey: 'sua-service-key' // Substitua pela sua service key (para opera√ß√µes admin)
};

// Cliente normal (anon key)
const supabase = createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.anonKey);

// Cliente administrativo (service key)
const supabaseAdmin = createClient(SUPABASE_CONFIG.url, SUPABASE_CONFIG.serviceKey);

// Fun√ß√£o para verificar a conex√£o
async function testConnection() {
  console.log('üîå Testando conex√£o com Supabase...');
  
  try {
    const { data, error } = await supabase.from('users').select('count').limit(1);
    
    if (error) {
      console.error('‚ùå Erro de conex√£o:', error);
      return false;
    }
    
    console.log('‚úÖ Conex√£o com Supabase OK!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return false;
  }
}

// Fun√ß√£o para verificar usu√°rios na tabela
async function checkUsersTable() {
  console.log('üë• Verificando usu√°rios na tabela...');
  
  try {
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('cnpj', '89.263.465/0001-49')
      .eq('name', 'danilo');
    
    if (error) {
      console.error('‚ùå Erro ao buscar usu√°rios:', error);
      return null;
    }
    
    if (data && data.length > 0) {
      console.log('‚úÖ Usu√°rio encontrado na tabela:', data[0]);
      return data[0];
    } else {
      console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado na tabela');
      return null;
    }
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return null;
  }
}

// Fun√ß√£o para criar usu√°rio na tabela
async function createUserInTable() {
  console.log('üë§ Criando usu√°rio na tabela...');
  
  try {
    const { data, error } = await supabase
      .from('users')
      .insert({
        name: 'danilo',
        email: 'danilo@teste.com',
        cnpj: '89.263.465/0001-49',
        role: 'host'
      })
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao criar usu√°rio:', error);
      return null;
    }
    
    console.log('‚úÖ Usu√°rio criado na tabela:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return null;
  }
}

// Fun√ß√£o para verificar usu√°rios no Auth
async function checkAuthUsers() {
  console.log('üîê Verificando usu√°rios no Supabase Auth...');
  
  try {
    // Tentar fazer login para verificar se o usu√°rio existe
    const { data, error } = await supabase.auth.signInWithPassword({
      email: 'danilo@teste.com',
      password: '123'
    });
    
    if (error) {
      if (error.message.includes('Invalid login credentials')) {
        console.log('‚ö†Ô∏è Usu√°rio n√£o existe no Supabase Auth');
        return false;
      } else {
        console.error('‚ùå Erro no login:', error);
        return false;
      }
    } else {
      console.log('‚úÖ Usu√°rio existe no Supabase Auth:', data.user);
      return true;
    }
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return false;
  }
}

// Fun√ß√£o para criar usu√°rio no Auth (requer service key)
async function createUserInAuth() {
  console.log('üîê Criando usu√°rio no Supabase Auth...');
  
  try {
    const { data, error } = await supabaseAdmin.auth.admin.createUser({
      email: 'danilo@teste.com',
      password: '123',
      email_confirm: true,
      user_metadata: {
        name: 'danilo'
      }
    });
    
    if (error) {
      console.error('‚ùå Erro ao criar usu√°rio no Auth:', error);
      return null;
    }
    
    console.log('‚úÖ Usu√°rio criado no Supabase Auth:', data.user);
    return data.user;
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return null;
  }
}

// Fun√ß√£o para sincronizar IDs entre tabela e Auth
async function syncUserIds(tableUser, authUser) {
  console.log('üîÑ Sincronizando IDs...');
  
  try {
    const { data, error } = await supabase
      .from('users')
      .update({ id: authUser.id })
      .eq('id', tableUser.id)
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Erro ao sincronizar IDs:', error);
      return false;
    }
    
    console.log('‚úÖ IDs sincronizados:', data);
    return true;
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
    return false;
  }
}

// Fun√ß√£o principal para configurar tudo
async function setupComplete() {
  console.log('üöÄ INICIANDO CONFIGURA√á√ÉO COMPLETA');
  console.log('==================================');
  
  // 1. Testar conex√£o
  const connected = await testConnection();
  if (!connected) {
    console.error('‚ùå N√£o foi poss√≠vel conectar ao Supabase');
    return;
  }
  
  // 2. Verificar/criar usu√°rio na tabela
  let tableUser = await checkUsersTable();
  if (!tableUser) {
    tableUser = await createUserInTable();
    if (!tableUser) {
      console.error('‚ùå N√£o foi poss√≠vel criar usu√°rio na tabela');
      return;
    }
  }
  
  // 3. Verificar/criar usu√°rio no Auth
  const authExists = await checkAuthUsers();
  let authUser = null;
  
  if (!authExists) {
    authUser = await createUserInAuth();
    if (!authUser) {
      console.error('‚ùå N√£o foi poss√≠vel criar usu√°rio no Auth');
      return;
    }
    
    // 4. Sincronizar IDs
    await syncUserIds(tableUser, authUser);
  }
  
  // 5. Teste final
  console.log('üß™ Testando login final...');
  const { data, error } = await supabase.auth.signInWithPassword({
    email: 'danilo@teste.com',
    password: '123'
  });
  
  if (error) {
    console.error('‚ùå Erro no teste final:', error);
  } else {
    console.log('üéâ SUCESSO! Login funcionando:', data.user);
  }
}

// Fun√ß√£o para apenas testar login
async function testLogin() {
  console.log('üß™ Testando login...');
  
  const { data, error } = await supabase.auth.signInWithPassword({
    email: 'danilo@teste.com',
    password: '123'
  });
  
  if (error) {
    console.error('‚ùå Erro no login:', error);
  } else {
    console.log('‚úÖ Login bem-sucedido:', data.user);
  }
}

// Exportar fun√ß√µes para uso
export {
  testConnection,
  checkUsersTable,
  createUserInTable,
  checkAuthUsers,
  createUserInAuth,
  syncUserIds,
  setupComplete,
  testLogin
};

// Executar se chamado diretamente
if (typeof window === 'undefined') {
  // Node.js
  setupComplete();
} else {
  // Browser
  console.log('üìù Scripts dispon√≠veis:');
  console.log('- setupComplete() - Configura√ß√£o completa');
  console.log('- testLogin() - Teste de login');
  console.log('- testConnection() - Teste de conex√£o');
  console.log('');
  console.log('‚ö†Ô∏è IMPORTANTE: Configure as credenciais do Supabase no in√≠cio do arquivo!');
}
